module SequenceDetector(
    input clk, reset, in,
    output reg detected
);
    reg [1:0] state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= 2'b00;
        else begin
            case (state)
                2'b00: state <= (in) ? 2'b01 : 2'b00;
                2'b01: state <= (in) ? 2'b01 : 2'b10;
                2'b10: state <= (in) ? 2'b11 : 2'b00;
                2'b11: state <= (in) ? 2'b01 : 2'b00;
                default: state <= 2'b00;
            endcase
        end
    end

    always @(*) detected = (state == 2'b11);
endmodule

TEST BENCH

module tb_SequenceDetector;
    reg clk, reset, in;
    wire detected;

    SequenceDetector uut (.clk(clk), .reset(reset), .in(in), .detected(detected));

    initial begin
        clk = 0; forever #5 clk = ~clk;
    end

    initial begin
        $monitor("Time=%0t In=%b | Detected=%b", $time, in, detected);
        reset = 1; #10;
        reset = 0; in = 0; #10;
        in = 1; #10; in = 0; #10; in = 1; #10;
        in = 1; #10; in = 0; #10; in = 1; #10;
        $finish;
    end
endmodule
